M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M7, M8, criterion = "loo"))
tab$Formula = c(M1$formula[1]$formula[3],
M2$formula[1]$formula[3],
M3$formula[1]$formula[3],
M4$formula[1]$formula[3],
M5$formula[1]$formula[3],
M6$formula[1]$formula[3],
M7$formula[1]$formula[3]
)
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
out = list(Selection= tab, Best_model = mod_lis[rownames(tab)[1]])
return(out)
}
S1 <- brm(surv ~ z*NK + FishBiom + Density + canopy + (1|stream), family = bernoulli(), Gdata)#,
Survival_G = Model_selection(S1)
Model_selection <- function(Full_model){
M1 = Full_model
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
tab$Formula = c(M1$formula[1]$formula[3],
M2$formula[1]$formula[3],
M3$formula[1]$formula[3],
M4$formula[1]$formula[3],
M5$formula[1]$formula[3],
M6$formula[1]$formula[3],
M7$formula[1]$formula[3]
)
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
out = list(Selection= tab, Best_model = mod_lis[rownames(tab)[1]])
return(out)
}
S1 <- brm(surv ~ z*NK + FishBiom + Density + canopy + (1|stream), family = bernoulli(), Gdata),
iter = 1500, chains = 2)
S1 <- brm(surv ~ z*NK + FishBiom + Density + canopy + (1|stream), family = bernoulli(), Gdata,
iter = 1500, chains = 2)
Survival_G = Model_selection(S1)
Survival_G$Selection
Model_selection <- function(Full_model){
M1 = Full_model
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
tab$Formula = c(mod_lis[rownames(tab)[1]]$formula[1]$formula[3],
mod_lis[rownames(tab)[2]]$formula[1]$formula[3],
mod_lis[rownames(tab)[3]]$formula[1]$formula[3],
mod_lis[rownames(tab)[4]]$formula[1]$formula[3],
mod_lis[rownames(tab)[5]]$formula[1]$formula[3],
mod_lis[rownames(tab)[6]]$formula[1]$formula[3],
mod_lis[rownames(tab)[7]]$formula[1]$formula[3]
)
out = list(Selection= tab, Best_model = mod_lis[rownames(tab)[1]])
return(out)
}
S1 <- brm(surv ~ z*NK + FishBiom + Density + canopy + (1|stream), family = bernoulli(), Gdata,
iter = 1500, chains = 1)
Survival_G = Model_selection(S1)
Survival_G$Selection
M1 = S1
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
c(mod_lis[rownames(tab)[1]]$formula[1]$formula[3],
mod_lis[rownames(tab)[2]]$formula[1]$formula[3],
mod_lis[rownames(tab)[3]]$formula[1]$formula[3],
mod_lis[rownames(tab)[4]]$formula[1]$formula[3],
mod_lis[rownames(tab)[5]]$formula[1]$formula[3],
mod_lis[rownames(tab)[6]]$formula[1]$formula[3],
mod_lis[rownames(tab)[7]]$formula[1]$formula[3]
)
mod_lis[rownames(tab)[1]]
mod_lis[rownames(tab)[1]]$formula[1]
mod_lis[rownames(tab)[1]]
mod_lis[rownames(tab)[1]][formula()]
brmsformula(mod_lis[rownames(tab)[1]])
brmsformula(M1)
M1$formula
tab$Formula = M1$formula
tab$Formula
M1$formula
M1$formula[1]
M1$formula[1]$formula[3]
mod_lis[1,formula[1]$formula[3]]
mod_lis[1][formula[1]$formula[3]]
mod_lis[[1]][formula[1]$formula[3]]
mod_lis[1]
mod_lis$M1$formula[3]
mod_lis$M1$formula[1]
mod_lis$M1$formula[1]$formula[3]
mod_lis$"rownames(tab)[1]"$formula[1]$formula[3]
mod_lis$rownames(tab)[1]$formula[1]$formula[3]
mod_lis[rownames(tab)[1]]$formula[1]$formula[3]
objects(M1)
mod_lis$M6$formula
Model_selection <- function(Full_model){
M1 = S1
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
tab$Formula = c(mod_lis[rownames(tab)[1]]$formula[1]$formula[3],
mod_lis[rownames(tab)[2]]$formula[1]$formula[3],
mod_lis[rownames(tab)[3]]$formula[1]$formula[3],
mod_lis[rownames(tab)[4]]$formula[1]$formula[3],
mod_lis[rownames(tab)[5]]$formula[1]$formula[3],
mod_lis[rownames(tab)[6]]$formula[1]$formula[3],
mod_lis[rownames(tab)[7]]$formula[1]$formula[3]
)
out = list(Selection= tab, Best_model = mod_lis[rownames(tab)[1]])
return(out)
}
S1 <- brm(surv ~ z*NK + FishBiom + Density + canopy + (1|stream), family = bernoulli(), Gdata,
iter = 6000, warmup = 4500, control = list(adapt_delta = 0.92, max_treedepth = 13))
summary(S1)
S1 <- brm(surv ~ z*NK + FishBiom + Density + canopy + (1|stream), family = bernoulli(), Gdata,
iter = 2000, warmup = 1000, control = list(adapt_delta = 0.92, max_treedepth = 13))
Survival_G = Model_selection(S1)
Survival_G$Selection
Survival_G$Best_model
G1 <- brm(z1 ~ z*NK + FishBiom + Density + canopy + (1|stream), family = gaussian(), subset(Gdata, surv == 1),
iter = 2000, warmup = 1000, control = list(adapt_delta = 0.92, max_treedepth = 13))
summary(G1)
Growth_G = Model_selection(G1)
Growth_G$Selection
Growth_G$Best_model
R1 <- brm(Recr ~ z*NK + FishBiom + Density + canopy + (1|stream), family = negbinomial(), subset(Gdata, surv == 1),
iter = 2000, warmup = 1000, control = list(adapt_delta = 0.92, max_treedepth = 13))
summary(R1)
Repro_G = Model_selection(R1)
Repro_G$Selection
Repro_G$Best_model
conditional_effects(Repro_G$Best_model, effects = "z:NK")
?posterior_predict()
seq(from=5, to= 30, by= 0.25)
seq(from=5, to= 30, by= 0.1)
size = seq(from=5, to= 30, by= 0.1)
size = seq(from=5, to= 30, by= 0.1)
newdata <- data.frame(
NK = c(rep("0", length(size)), rep("1", length(size))),
z = c(size- center, size- center),
FishBiom = 0
)
newdata
pp <- posterior_predict(Repro_G$Best_model, newdata = newdata)
posterior_samples(Repro_G$Best_model)
mod = Repro_G$Best_model
pp <- posterior_predict(mod, newdata = newdata)
mod = unlist(Repro_G$Best_model)
pp <- posterior_predict(mod, newdata = newdata)
str(Repro_G$Best_model)
get("R1")
str(get("R1"))
Model_selection <- function(Full_model){
M1 = S1
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
tab$Formula = c(mod_lis[rownames(tab)[1]]$formula[1]$formula[3],
mod_lis[rownames(tab)[2]]$formula[1]$formula[3],
mod_lis[rownames(tab)[3]]$formula[1]$formula[3],
mod_lis[rownames(tab)[4]]$formula[1]$formula[3],
mod_lis[rownames(tab)[5]]$formula[1]$formula[3],
mod_lis[rownames(tab)[6]]$formula[1]$formula[3],
mod_lis[rownames(tab)[7]]$formula[1]$formula[3]
)
return(get(rownames(tab)[1]))
}
print(tab)
return(get(rownames(tab)[1]))
Model_selection <- function(Full_model){
M1 = S1
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
tab$Formula = c(mod_lis[rownames(tab)[1]]$formula[1]$formula[3],
mod_lis[rownames(tab)[2]]$formula[1]$formula[3],
mod_lis[rownames(tab)[3]]$formula[1]$formula[3],
mod_lis[rownames(tab)[4]]$formula[1]$formula[3],
mod_lis[rownames(tab)[5]]$formula[1]$formula[3],
mod_lis[rownames(tab)[6]]$formula[1]$formula[3],
mod_lis[rownames(tab)[7]]$formula[1]$formula[3]
)
print(tab)
return(get(rownames(tab)[1]))
}
Model_selection <- function(Full_model){
M1 = S1
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
tab$Formula = c(mod_lis[rownames(tab)[1]]$formula[1]$formula[3],
mod_lis[rownames(tab)[2]]$formula[1]$formula[3],
mod_lis[rownames(tab)[3]]$formula[1]$formula[3],
mod_lis[rownames(tab)[4]]$formula[1]$formula[3],
mod_lis[rownames(tab)[5]]$formula[1]$formula[3],
mod_lis[rownames(tab)[6]]$formula[1]$formula[3],
mod_lis[rownames(tab)[7]]$formula[1]$formula[3]
)
print(tab)
return(get(rownames(tab)[1]))
}
R1 <- brm(Recr ~ z*NK + FishBiom + Density + canopy + (1|stream), family = negbinomial(), subset(Gdata, surv == 1),
iter = 2000, warmup = 1000, control = list(adapt_delta = 0.92, max_treedepth = 13))
Repro_G = Model_selection(R1)
size = seq(from=5, to= 30, by= 0.1)
newdata <- data.frame(
NK = c(rep("0", length(size)), rep("1", length(size))),
z = c(size- center, size- center),
FishBiom = 0
)
pp <- posterior_predict(Repro_G, newdata = newdata)
pp <- posterior_predict(Repro_G, newdata = newdata, re_formula = NA)
str(pp)
pp
str(pp)
pp[1]
str(subset(Gdata, surv == 1))
str(pp)
pp[1:400,]
pp[1:400,1]
pp <- posterior_predict(Repro_G, newdata = newdata, re_formula = NA, transform = inv_logit_scaled())
pp <- posterior_predict(Repro_G, newdata = newdata, re_formula = NA, transform = inv_logit_scaled(.))
pp <- prepare_predictions(Repro_G, newdata = newdata, re_formula = NA)
Repro_G
R1 <- brm(Recr ~ z*NK + FishBiom + Density + canopy + (1|stream), family = negbinomial(), subset(Gdata, surv == 1),
iter = 2000, warmup = 1000, control = list(adapt_delta = 0.92, max_treedepth = 13))
Model_selection <- function(Full_model){
M1 = Full_model
M1 <- add_criterion(M1, c("loo", "waic"))
## remove effects
M2 <- update(M1, formula. = ~ . - FishBiom)
M2 <- add_criterion(M2, c("loo", "waic"))
M3 <- update(M1, formula. = ~ . - Density)
M3 <- add_criterion(M3, c("loo", "waic"))
M4 <- update(M1, formula. = ~ . - canopy)
M4 <- add_criterion(M4, c("loo", "waic"))
M5 <- update(M1, formula. = ~ . -FishBiom - canopy)
M5 <- add_criterion(M5, c("loo", "waic"))
M6 <- update(M1, formula. = ~ . -Density - canopy)
M6 <- add_criterion(M6, c("loo", "waic"))
M7 <- update(M1, formula. = ~ . -Density - FishBiom - canopy)
M7 <- add_criterion(M7, c("loo", "waic"))
tab = data.frame(loo_compare(M1,M2, M3, M4, M5,M6, M7, criterion = "loo"))
mod_lis = list(M1 = M1, M2= M2, M3= M3, M4= M4, M5= M5, M6= M6, M7= M7)
tab$Formula = c(mod_lis[rownames(tab)[1]]$formula[1]$formula[3],
mod_lis[rownames(tab)[2]]$formula[1]$formula[3],
mod_lis[rownames(tab)[3]]$formula[1]$formula[3],
mod_lis[rownames(tab)[4]]$formula[1]$formula[3],
mod_lis[rownames(tab)[5]]$formula[1]$formula[3],
mod_lis[rownames(tab)[6]]$formula[1]$formula[3],
mod_lis[rownames(tab)[7]]$formula[1]$formula[3]
)
print(tab)
return(get(rownames(tab)[1]))
}
Repro_G = Model_selection(R1)
size = seq(from=5, to= 30, by= 0.1)
newdata <- data.frame(
NK = c(rep("0", length(size)), rep("1", length(size))),
z = c(size- center, size- center),
FishBiom = 0
)
pp <- prepare_predictions(Repro_G, newdata = newdata, re_formula = NA)
pp <- post(Repro_G, newdata = newdata, re_formula = NA)
pp <- posterior_predict(Repro_G, newdata = newdata, re_formula = NA)
posterior_samples(Repro_G)
post = posterior_samples(Repro_G)
p_linkG = function(post, NK=0, size, center = center){
z = size - center
pp = post$b_Intercept + post$b_z *z  + post$b_NK1 * NK + post$`b_z:NK1` (z*NK)
return(pp)
}
size <-  seq(from= 5, to=30, length.out = 200)
pred.raw <- sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size))
p_linkG = function(post, NK=0, size, center = center){
z = size - center
pp = post$b_Intercept + post$b_z *z  + post$b_NK1 * NK + post$`b_z:NK1` (z*NK)
return(pp)
}
pred.raw <- sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size))
pred.raw <- sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size, center = 18))
pp = post$b_Intercept + post$b_z *z  + post$b_NK1 * NK + post$`b_z:NK1`* (z*NK)
p_linkG = function(post, NK=0, size, center = center){
z = size - center
pp = post$b_Intercept + post$b_z *z  + post$b_NK1 * NK + post$`b_z:NK1`* (z*NK)
return(pp)
}
size <-  seq(from= 5, to=30, length.out = 200)
pred.raw <- sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size, center = 18))
p.NK_G= pred.raw
pred.raw <- sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size, center = 18))
p.NK_G= pred.raw
p.NK_G.mean <- apply(pred.raw, 2, mean)
p.NK_G.PI <- apply(pred.raw, 2, HPDI,prob = .95)
p.NK_G= sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size, center = 18))
p.NK_G.mean <- apply(p.NK_G, 2, mean)
p.NK_G.PI <- apply(p.NK_G, 2, HPDI,prob = .95)
p.NK_G.mean
p.NK_G.PI
p.NK_G= inv_logit_scaled(sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size, center = 18)))
p.NK_G.mean <- apply(p.NK_G, 2, mean)
p.NK_G.PI <- apply(p.NK_G, 2, HPDI,prob = .95)
p.NK_G.mean
p.NK_G.PI
p.KG_G= inv_logit_scaled(sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size, center = 18)))
p.KG_G.mean <- apply(p.NK_G, 2, mean)
p.KG_G.PI <- apply(p.NK_G, 2, HPDI,prob = .95)
p.NK_G= inv_logit_scaled(sapply(1:length(size), function(i) p_linkG(post = post, NK = 1, size = size, center = 18)))
p.NK_G.mean <- apply(p.NK_G, 2, mean)
p.NK_G.PI <- apply(p.NK_G, 2, HPDI,prob = .95)
p.NK_G- p.KG_G
LOS = function(x){
p =  100 * length(which(x > 0))/length(x)
return(p)
}
LOS(p.NK_G- p.KG_G)
c(p.NK_G)
LOS(c(p.NK_G)- c(p.KG_G))
LOS(p.NK_G- p.KG_G)
100-LOS(p.NK_G- p.KG_G)
LOS(p.KG_G- p.NK_G)
p.KG_G= exp(sapply(1:length(size), function(i) p_linkG(post = post, NK = 0, size = size, center = 18)))
p.KG_G.mean <- apply(p.NK_G, 2, mean)
p.KG_G.PI <- apply(p.NK_G, 2, HPDI,prob = .95)
p.NK_G= exp(sapply(1:length(size), function(i) p_linkG(post = post, NK = 1, size = size, center = 18)))
p.NK_G.mean <- apply(p.NK_G, 2, mean)
p.NK_G.PI <- apply(p.NK_G, 2, HPDI,prob = .95)
LOS(p.NK_G- p.KG_G)
LOS(p.KG_G- p.NK_G)
p.NK_G.mean
p.NK_G.PI
p.KG_G.mean
dens(p.NK_G)
dens(log(p.NK_G))
dens(post$b_Intercept)
96*5
96*5/60
dens(post$b_Intercept)
dens(post$b_Intercept + post$b_NK1, add = T)
dens(exp(post$b_Intercept))
dens(exp(post$b_Intercept + post$b_NK1), add = T)
dens(exp(post$b_Intercept + post$b_NK1))
dens(exp(post$b_Intercept), add = T)
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T)
dens(exp(post$b_Intercept), add = T, show.HPDI = T)
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T, colour = "red")
dens(exp(post$b_Intercept), add = T, show.HPDI = T)
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T, color = "red")
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T,  "red")
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T)
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T)
dens(exp(post$b_Intercept), add = T, show.HPDI = T)
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept")
dens(exp(post$b_Intercept), add = T, show.HPDI = T)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens(exp(post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept")
dens(exp(post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept")
dens((post$b_z), add = T, show.HPDI = T)
?dens
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept", bg= "red" )
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept", col= "red" )
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept", col= "red" )
dens((post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red")
dens((post$b_z), add = T, show.HPDI = T)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept", col= "red" )
dens((post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red")
dens((post$b_z), add = T, show.HPDI = T)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,1.5))
dens((post$b_Intercept), add = T, show.HPDI = T)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,1.8))
dens((post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,1.8))
dens((post$b_z), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,5))
dens((post$b_z), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red")
dens((post$b_z), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,10))
dens((post$b_z), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,15))
dens((post$b_z), add = T, show.HPDI = T)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,1.8))
dens((post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,15))
dens((post$b_z), add = T, show.HPDI = T)
LOS(post$b_NK1)
LOS(post$b_NK1)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = paste("Intercept ", LOS(post$b_NK1), "%", sep = "" ), col= "red", ylim = c(0,1.8))
dens((post$b_Intercept), add = T, show.HPDI = T)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = paste("Intercept ", "(", LOS(post$b_NK1), "%", ")", sep = "" ), col= "red", ylim = c(0,1.8))
dens((post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T, main = "Intercept", col= "red", ylim = c(0,15), main = paste("Slope ", "(", LOS(post$`b_z:NK1`), "%", ")", sep = "" ))
dens((post$b_z), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T,  col= "red", ylim = c(0,15), main = paste("Slope ", "(", LOS(post$`b_z:NK1`), "%", ")", sep = "" ))
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = paste("Intercept ", "(", LOS(post$b_NK1), "%", ")", sep = "" ), col= "red", ylim = c(0,1.8))
dens((post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T,  col= "red", ylim = c(0,15), main = paste("Slope ", "(", LOS(post$`b_z:NK1`), "%", ")", sep = "" ))
dens((post$b_z), add = T, show.HPDI = T)
svg("plots/Recr_IntSlope.svg", width = 7, height = 3.5)
op<-par(mfrow=c(1,2), mar = c(4, 4 , 2, 1), oma = c(0.5, 1, 1, 0.5)) # c(bottom, left, top, right)
dens((post$b_Intercept + post$b_NK1), show.HPDI = T, main = paste("Intercept ", "(", LOS(post$b_NK1), "%", ")", sep = "" ), col= "red", ylim = c(0,1.8))
dens((post$b_Intercept), add = T, show.HPDI = T)
dens((post$b_z + post$`b_z:NK1`), show.HPDI = T,  col= "red", ylim = c(0,15), main = paste("Slope ", "(", LOS(post$`b_z:NK1`), "%", ")", sep = "" ))
dens((post$b_z), add = T, show.HPDI = T)
graphics.off()
# Predictions for Growth
post_G = posterior_samples(Growth_G)
p.KG_G= (sapply(1:length(size), function(i) p_linkG(post = post_G, NK = 0, size = size, center = 18)))
# Predictions for Growth
post_G = posterior_samples(Growth_G)
