ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=LC, ymax=UC), width=.1) +
geom_line() +
geom_point(size = 5)
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=LC, ymax=UC), width=.1) +
geom_line() +
geom_point(size = 2)
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=LC, ymax=UC), width=.1) +
geom_line() +
geom_point(size = 2) + ylab("Reduce eye (%)")
glimpse(Data)
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=LC, ymax=UC), width=.1) +
geom_line() +
geom_point(size = 2) + ylab("Reduce eye (%)") + geom_point(y =ReducedEyePercentage )
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)
p
to_plot = data_frame(Treatments =levels(Data$Treatment),
y = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
to_plot = c(Treatments =levels(Data$Treatment),
y = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
to_plot = c(y = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
to_plot = c(y = 100* as.vector(inv_logit_scaled(apply(post, 2, mean)[1:4])),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
to_plot = data_frame(Treatments =levels(Data$Treatment),
y = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
?stat_summary
to_plot = data_frame(Treatments =levels(Data$Treatment),
mean = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=to_plot$Treatments, y=to_plot$mean), colour="blue")
p
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=to_plot$Treatments, y=to_plot$mean), colour="blue")
p <- ggplot(post[,1:4], aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)
p
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue")
p
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue")
p
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue") +
p +   geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue") +
?stat_summary
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue") +
p +   geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue") +
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue") +
p +   geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue")
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE) +
geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue") +
p +   geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue")
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)
p + geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue")
p + geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue")
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)
p + geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue") +
geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue") +
geom_point(aes(x=3, y=to_plot$mean[3]), colour="blue") +  geom_errorbar(aes(x=3, ymin=to_plot$ymin[3], ymax=to_plot$ymax[3] ), colour="blue") +
geom_point(aes(x=4, y=to_plot$mean[4]), colour="blue") +  geom_errorbar(aes(x=4, ymin=to_plot$ymin[4], ymax=to_plot$ymax[4] ), colour="blue")
to_plot = data_frame(Treatments =levels(Data$Treatment),
mean = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)
p + geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue") +
geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue") +
geom_point(aes(x=3, y=to_plot$mean[3]), colour="blue") +  geom_errorbar(aes(x=3, ymin=to_plot$ymin[3], ymax=to_plot$ymax[3] ), colour="blue") +
geom_point(aes(x=4, y=to_plot$mean[4]), colour="blue") +  geom_errorbar(aes(x=4, ymin=to_plot$ymin[4], ymax=to_plot$ymax[4] ), colour="blue")
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=LC, ymax=UC), width=.1) +
geom_line() +
geom_point(size = 2) + ylab("Reduce eye (%)") +
geom_point(aes(x=5.6, y=3.9), colour="blue")
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=.1) +
geom_line() +
geom_point(size = 2) + ylab("Reduce eye (%)") +
geom_point(aes(x=5.6, y=3.9), colour="blue")
to_plot = data_frame(Treatments =levels(Data$Treatment),
mean = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, HPDI, prob = .95))[2,1:4])
to_plot
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=.1) +
geom_line() +
geom_point(size = 2) + ylab("Reduce eye (%)") +
geom_point(aes(x=5.6, y=3.9), colour="blue")
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=.1) +
geom_line() +
geom_point(size = 2) + ylab("Reduce eye (%)")
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=.1) +
geom_line() +
geom_point(size = 3) + ylab("Reduce eye (%)")
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=.1) +
geom_line() +
geom_point(size = 3) + ylab("Reduce eye (%)")
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width= .5) +
geom_line() +
geom_point(size = 3) + ylab("Reduce eye (%)")
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width= .2) +
geom_line() +
geom_point(size = 3) + ylab("Reduce eye (%)")
p + geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue", width= .2) +
geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue", width= .2) +
geom_point(aes(x=3, y=to_plot$mean[3]), colour="blue") +  geom_errorbar(aes(x=3, ymin=to_plot$ymin[3], ymax=to_plot$ymax[3] ), colour="blue", width= .2) +
geom_point(aes(x=4, y=to_plot$mean[4]), colour="blue") +  geom_errorbar(aes(x=4, ymin=to_plot$ymin[4], ymax=to_plot$ymax[4] ), colour="blue", width= .2)
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)  + ylab("Reduce eye (%)")
p + geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue", width= .2) +
geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue", width= .2) +
geom_point(aes(x=3, y=to_plot$mean[3]), colour="blue") +  geom_errorbar(aes(x=3, ymin=to_plot$ymin[3], ymax=to_plot$ymax[3] ), colour="blue", width= .2) +
geom_point(aes(x=4, y=to_plot$mean[4]), colour="blue") +  geom_errorbar(aes(x=4, ymin=to_plot$ymin[4], ymax=to_plot$ymax[4] ), colour="blue", width= .2)
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width= .2) +
geom_line() +
geom_point(size = 3) + ylab("Reduce eye (%)")
c(post$b_TreatmentDMAG_m,post$b_TreatmentDMAG_f) - c(post$b_TreatmentRNAi_m,post$b_TreatmentRNAi_m)
H1 = c(post$b_TreatmentDMAG_m,post$b_TreatmentDMAG_f) - c(post$b_TreatmentRNAi_m,post$b_TreatmentRNAi_m)
DMAG = inv_logit_scaled(c(post$b_TreatmentDMAG_m,post$b_TreatmentDMAG_f))
RNAi  =  inv_logit_scaled(c(post$b_TreatmentRNAi_m,post$b_TreatmentRNAi_m))
H1 = DMAG -  RNAi
length(which(H1 > 0)) / length(H1)
H1 = DMAG -  RNAi
length(which(H1 > 0)) / length(H1)
100 * length(which(H1 > 0)) / length(H1)
DMAG = inv_logit_scaled(post$b_TreatmentDMAG_m) +  inv_logit_scaled(post$b_TreatmentDMAG_f)
DMAG = (inv_logit_scaled(post$b_TreatmentDMAG_m) +  inv_logit_scaled(post$b_TreatmentDMAG_f))/2
RNAi  =  (inv_logit_scaled(post$b_TreatmentRNAi_m) +  inv_logit_scaled(post$b_TreatmentRNAi_f))/2
H1 = DMAG -  RNAi
100 * length(which(H1 > 0)) / length(H1)
mean(H1)
hdi(H1)
hdi(H1)[1]
hdi(H1)[1:2]
apply(post, 2, hdi)
to_plot = data_frame(Treatments =levels(Data$Treatment),
mean = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, hdi))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, hdi))[2,1:4])
to_plot
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)  + ylab("Reduce eye (%)")
p + geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue", width= .2) +
geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue", width= .2) +
geom_point(aes(x=3, y=to_plot$mean[3]), colour="blue") +  geom_errorbar(aes(x=3, ymin=to_plot$ymin[3], ymax=to_plot$ymax[3] ), colour="blue", width= .2) +
geom_point(aes(x=4, y=to_plot$mean[4]), colour="blue") +  geom_errorbar(aes(x=4, ymin=to_plot$ymin[4], ymax=to_plot$ymax[4] ), colour="blue", width= .2)
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width= .2) +
geom_line() +
geom_point(size = 3) + ylab("Reduce eye (%)")
DMAG = inv_logit_scaled(c(post$b_TreatmentDMAG_m,post$b_TreatmentDMAG_f))
RNAi  =  inv_logit_scaled(c(post$b_TreatmentRNAi_m,post$b_TreatmentRNAi_m))
H1 = DMAG -  RNAi
100 * length(which(H1 > 0)) / length(H1)
mean(H1)
hdi(H1)[1:2]
rm(list=ls()) # clean the memory
library("dplyr")
library("ggplot2")
library("ggfortify")
library("brms")
library("tidyverse")
library("readxl")
library("HDInterval")
Data <- read_excel("Dropbox/Projects_JM/Muenster/Ozge/Data.xlsx")
glimpse(Data)
Data$Treatment = factor(Data$Treatment)
levels(Data$Treatment)
levels(Data$Treatment) <- c("DMAG_m", "DMAG_f", "RNAi_m", "RNAi_f" )
levels(Data$Treatment)
Data$N_tot = Data$NormalEyeNumbers + Data$ReducedEyeNumbers
Data$Y = Data$ReducedEyeNumbers
# Run binomial model 1
bm1 <- brm(Y | trials(N_tot) ~ 0 + Treatment, family = binomial(), data = Data  )
summary(bm1)
conditional_effects(bm1, effects = "Treatment")
logit_scaled(0.5)
inv_logit_scaled(logit_scaled(0.5))
inv_logit_scaled(-4.30)
100*inv_logit_scaled(-4.30)
plot(bm1)
# Run binomial model 1
bm1 <- brm(Y | trials(N_tot) ~ 0 + Treatment, family = binomial(), data = Data, iter = 2000, warmup = 1000, chains = 4  )
summary(bm1)
conditional_effects(bm1, effects = "Treatment")
plot(bm1)
post = posterior_samples(bm1)
glimpse(post)
apply(post, 2, mean) # 2 = coloumns , 1 = rows
apply(post, 2, hdi) # 2 = coloumns , 1 = rows
to_plot = data_frame(Treatments =levels(Data$Treatment),
mean = 100* inv_logit_scaled(apply(post, 2, mean)[1:4]),
ymin= 100 *inv_logit_scaled(apply(post, 2, hdi))[1,1:4],
ymax = 100 *inv_logit_scaled(apply(post, 2, hdi))[2,1:4])
to_plot
p <- ggplot(Data, aes(x=Treatment, y=ReducedEyePercentage)) +
geom_violin(trim=FALSE)  + ylab("Reduce eye (%)")
p + geom_point(aes(x=1, y=to_plot$mean[1]), colour="blue") +  geom_errorbar(aes(x=1, ymin=to_plot$ymin[1], ymax=to_plot$ymax[1] ), colour="blue", width= .2) +
geom_point(aes(x=2, y=to_plot$mean[2]), colour="blue") +  geom_errorbar(aes(x=2, ymin=to_plot$ymin[2], ymax=to_plot$ymax[2] ), colour="blue", width= .2) +
geom_point(aes(x=3, y=to_plot$mean[3]), colour="blue") +  geom_errorbar(aes(x=3, ymin=to_plot$ymin[3], ymax=to_plot$ymax[3] ), colour="blue", width= .2) +
geom_point(aes(x=4, y=to_plot$mean[4]), colour="blue") +  geom_errorbar(aes(x=4, ymin=to_plot$ymin[4], ymax=to_plot$ymax[4] ), colour="blue", width= .2)
ggplot(to_plot, aes(x=Treatments, y=mean)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width= .2) +
geom_line() +
geom_point(size = 3) + ylab("Reduce eye (%)")
DMAG = inv_logit_scaled(c(post$b_TreatmentDMAG_m,post$b_TreatmentDMAG_f))
RNAi  =  inv_logit_scaled(c(post$b_TreatmentRNAi_m,post$b_TreatmentRNAi_m))
H1 = DMAG -  RNAi
100 * length(which(H1 > 0)) / length(H1)
mean(H1)
hdi(H1)[1:2]
DMAG = 100* inv_logit_scaled(c(post$b_TreatmentDMAG_m,post$b_TreatmentDMAG_f))
RNAi  = 100 * inv_logit_scaled(c(post$b_TreatmentRNAi_m,post$b_TreatmentRNAi_m))
H1 = DMAG -  RNAi
100 * length(which(H1 > 0)) / length(H1)
mean(H1)
hdi(H1)[1:2]
#  reduce eyes are more common in females
H2 = 100* inv_logit_scaled(post$b_TreatmentDMAG_f) - 100* inv_logit_scaled(post$b_TreatmentDMAG_m)
100* length(which(H2 > 0 )) / length(H2)
#  reduce eyes are more common in females RNAi
H3 = 100* inv_logit_scaled(post$b_TreatmentRNAi_f) - 100* inv_logit_scaled(post$b_TreatmentRNAi_m)
100* length(which(H3 > 0 )) / length(H3)
100* length(which(H2 - H3 > 0 )) / length(H3)
# Is there
100* length(which(H2 - H3 > 0 )) / length(H2 - H3)
# are the effects of DMAG on sex differences stronger than the effects RNAi on sex differences?
100* length(which(H2 - H3 > 0 )) / length(H2 - H3)
rm(list=ls(all=TRUE))
# MODEL COMPARASION FOR GROWTH
library("brms")
library(data.table)
rm(list=ls(all=TRUE))
###########################################################################################################
# First get the data
getwd()
setwd("~/Dropbox/Jaime M/Projects_JM/FSU/Pool_manipulation/KG_git/")
center = 18
# Guppy data cleaning -----------------------------------------------------
Gdata <- read.csv("data/GuppyIPM.csv")
Kdata <- read.csv("data/KillifishIPM.csv")
Gdata$z <- Gdata$SL1_mm - center
Gdata$z1 <- Gdata$SL2_mm
Gdata <- Gdata[-which(Gdata$Sex2=="M"),]
# Make sure the non reproductive have zeros
Gdata$Recr[which(Gdata$Repr==0 & Gdata$surv ==1)] = 0
# Killifish data cleaning -------------------------------------------------
Kdata$z <- Kdata$SL1_mm - center
Kdata$z1 <- Kdata$SL2_mm
Kdata <- Kdata[-which(Kdata$Sex2=="M"),]
# Make sure the non reproductive have zeros
Kdata$Recr[which(Kdata$Repr==0 & Kdata$surv ==1)] = 0
# Normalize the covariates (killifish biomass and canopy) -----------------
Gdata$FishBiom <- Gdata$BiomassG1 + Gdata$BiomassK1
Kdata$FishBiom <- Kdata$BiomassG1 + Kdata$BiomassK1
meanC = mean(unique(c(Gdata$FishBiom, Kdata$FishBiom ) ))
sdC = sd(unique(c(Gdata$FishBiom, Kdata$FishBiom ) ))
Gdata$FishBiom <- (Gdata$FishBiom - meanC) /  sdC
Kdata$FishBiom <- (Kdata$FishBiom - meanC) /  sdC
# fish density biomass/Area
Gdata$FishDen <- Gdata$FishBiom  / Gdata$area
Kdata$FishDen <- Kdata$FishBiom  / Kdata$area
meanC = mean(unique(c(Gdata$FishDen, Kdata$FishDen ) ))
sdC = sd(unique(c(Gdata$FishDen, Kdata$FishDen ) ))
Gdata$FishDen <- (Gdata$FishDen - meanC) /  sdC
Kdata$FishDen <- (Kdata$FishDen - meanC) /  sdC
#
meanC = mean(unique(c(Gdata$canopy, Kdata$canopy) ))
sdC = sd(unique(c(Gdata$canopy, Kdata$canopy) ))
Gdata$canopy <- (Gdata$canopy - meanC) /  sdC
Kdata$canopy <- (Kdata$canopy - meanC) /  sdC
# Re-code the random effects (drainage id) --------------------------------
Kdata$stream <- factor(Kdata$Location)
levels(Kdata$stream) <- 1:length(levels(Kdata$stream))
Kdata$stream <- as.numeric(Kdata$stream)
Gdata$stream <- factor(Gdata$Location)
levels(Gdata$stream) <- 1:length(levels(Gdata$stream))
Gdata$stream <- as.numeric(Gdata$stream)
ModG1 = brm(z1 ~ z*NK + FishBiom + FishDen + canopy, Gdata)
ModG2 = brm(z1 ~ z*NK +  FishDen + canopy, Gdata)
ModG3 = brm(z1 ~ z*NK +  canopy, Gdata)
ModK1 = brm(z1 ~ z*NG + FishBiom + FishDen + canopy, Kdata)
ModK2 = brm(z1 ~ z*NG +  FishDen + canopy, Kdata)
ModK3 = brm(z1 ~ z*NG +  canopy, Kdata)
surv = bf(surv ~ z*NK + FishBiom + FishDen + canopy, family = bernoulli())
growth = bf(z1 ~ z*NK + FishBiom + FishDen + canopy, family = gaussian())
ModG = brm(surv + growth, Gdata)
summary(ModG)
ModG = brm(surv + growth, Gdata, cores = 4, chains = 4,
iter = 6000, warmup = 4500, control = list(adapt_delta = 0.92, max_treedepth = 12))
ModG1 = add_criterion(ModG1, "waic")
ModG2 = add_criterion(ModG2, "waic")
ModG3 = add_criterion(ModG3, "waic")
loo_compare(ModG1, ModG2, ModG3, criterion = "waic")
loo_model_weights(ModG1, ModG2, ModG3, criterion = "waic")
?loo_compare
print(ModG1$criteria$waic)
print(ModG1$criteria$waic)[,3]
print(ModG1$criteria$waic)
print(ModG1$criteria$waic)
print(ModG3$criteria$waic)
print(ModG3$criteria$waic)
ModG1 = add_criterion(ModG1, c("waic", "loo"))
ModG2 = add_criterion(ModG2, c("waic", "loo"))
ModG3 = add_criterion(ModG3, c("waic", "loo"))
loo_compare(ModG1, ModG2, ModG3, criterion = "waic")
ModG2 = brm(z1 ~ z*NK +  FishBiom + canopy, Gdata)
ModG2 = add_criterion(ModG2, c("waic", "loo"))
ModG3 = brm(z1 ~ z*NK +  FishDen + canopy, Gdata)
ModG3 = add_criterion(ModG2, c("waic", "loo"))
ModG4 = brm(z1 ~ z*NK +  canopy, Gdata)
ModG4 = add_criterion(ModG4, c("waic", "loo"))
loo_compare(ModG1, ModG2, ModG3, ModG4, criterion = "waic")
loo_model_weights(ModG1, ModG2, ModG3, ModG4, criterion = "loo")
loo_compare(ModG1, ModG2, ModG3, ModG4, criterion = "loo")
loo_compare( ModG2, ModG3, criterion = "loo")
summary(ModG2)
summary(ModG3)
# MODEL COMPARASION FOR GROWTH
library("brms")
library(data.table)
rm(list=ls(all=TRUE))
###########################################################################################################
# First get the data
getwd()
setwd("~/Dropbox/Jaime M/Projects_JM/FSU/Pool_manipulation/KG_git/")
center = 18
# Guppy data cleaning -----------------------------------------------------
Gdata <- read.csv("data/GuppyIPM.csv")
Kdata <- read.csv("data/KillifishIPM.csv")
Gdata$z <- Gdata$SL1_mm - center
Gdata$z1 <- Gdata$SL2_mm
Gdata <- Gdata[-which(Gdata$Sex2=="M"),]
# Make sure the non reproductive have zeros
Gdata$Recr[which(Gdata$Repr==0 & Gdata$surv ==1)] = 0
# Killifish data cleaning -------------------------------------------------
Kdata$z <- Kdata$SL1_mm - center
Kdata$z1 <- Kdata$SL2_mm
Kdata <- Kdata[-which(Kdata$Sex2=="M"),]
# Make sure the non reproductive have zeros
Kdata$Recr[which(Kdata$Repr==0 & Kdata$surv ==1)] = 0
# Normalize the covariates (killifish biomass and canopy) -----------------
Gdata$FishBiom <- Gdata$BiomassG1 + Gdata$BiomassK1
Kdata$FishBiom <- Kdata$BiomassG1 + Kdata$BiomassK1
meanC = mean(unique(c(Gdata$FishBiom, Kdata$FishBiom ) ))
sdC = sd(unique(c(Gdata$FishBiom, Kdata$FishBiom ) ))
Gdata$FishBiom <- (Gdata$FishBiom - meanC) /  sdC
Kdata$FishBiom <- (Kdata$FishBiom - meanC) /  sdC
# fish density biomass/Area
Gdata$FishDen <- Gdata$FishBiom  / Gdata$area
Kdata$FishDen <- Kdata$FishBiom  / Kdata$area
meanC = mean(unique(c(Gdata$FishDen, Kdata$FishDen ) ))
sdC = sd(unique(c(Gdata$FishDen, Kdata$FishDen ) ))
Gdata$FishDen <- (Gdata$FishDen - meanC) /  sdC
Kdata$FishDen <- (Kdata$FishDen - meanC) /  sdC
#
meanC = mean(unique(c(Gdata$canopy, Kdata$canopy) ))
sdC = sd(unique(c(Gdata$canopy, Kdata$canopy) ))
Gdata$canopy <- (Gdata$canopy - meanC) /  sdC
Kdata$canopy <- (Kdata$canopy - meanC) /  sdC
# Re-code the random effects (drainage id) --------------------------------
Kdata$stream <- factor(Kdata$Location)
levels(Kdata$stream) <- 1:length(levels(Kdata$stream))
Kdata$stream <- as.numeric(Kdata$stream)
Gdata$stream <- factor(Gdata$Location)
levels(Gdata$stream) <- 1:length(levels(Gdata$stream))
Gdata$stream <- as.numeric(Gdata$stream)
# Compare growh models ----------------------------------------------------
surv = bf(surv ~ z*NK + FishBiom + FishDen + canopy, family = bernoulli())
growth = bf(z1 ~ z*NK + FishBiom + FishDen + canopy, family = gaussian())
ModG1 = brm(z1 ~ z*NK + FishBiom + FishDen + canopy, Gdata)
ModG1 = add_criterion(ModG1, c("waic", "loo"))
ModG2 = brm(z1 ~ z*NK +  FishBiom + canopy, Gdata)
ModG2 = add_criterion(ModG2, c("waic", "loo"))
ModG3 = brm(z1 ~ z*NK +  FishDen + canopy, Gdata)
ModG3 = add_criterion(ModG2, c("waic", "loo"))
ModG4 = brm(z1 ~ z*NK +  canopy, Gdata)
ModG4 = add_criterion(ModG4, c("waic", "loo"))
loo_compare(ModG1, ModG2, ModG3, ModG4, criterion = "loo")
summary(ModG3)
summary(ModG2)
ModG3 = brm(z1 ~ z*NK +  FishDen + canopy, Gdata)
ModG3 = add_criterion(ModG2, c("waic", "loo"))
summary(ModG2)
summary(ModG3)
# MODEL COMPARASION FOR GROWTH
library("brms")
library(data.table)
rm(list=ls(all=TRUE))
###########################################################################################################
# First get the data
getwd()
setwd("~/Dropbox/Jaime M/Projects_JM/FSU/Pool_manipulation/KG_git/")
center = 18
# Guppy data cleaning -----------------------------------------------------
Gdata <- read.csv("data/GuppyIPM.csv")
Kdata <- read.csv("data/KillifishIPM.csv")
Gdata$z <- Gdata$SL1_mm - center
Gdata$z1 <- Gdata$SL2_mm
Gdata <- Gdata[-which(Gdata$Sex2=="M"),]
# Make sure the non reproductive have zeros
Gdata$Recr[which(Gdata$Repr==0 & Gdata$surv ==1)] = 0
# Killifish data cleaning -------------------------------------------------
Kdata$z <- Kdata$SL1_mm - center
Kdata$z1 <- Kdata$SL2_mm
Kdata <- Kdata[-which(Kdata$Sex2=="M"),]
# Make sure the non reproductive have zeros
Kdata$Recr[which(Kdata$Repr==0 & Kdata$surv ==1)] = 0
# Normalize the covariates (killifish biomass and canopy) -----------------
Gdata$FishBiom <- Gdata$BiomassG1 + Gdata$BiomassK1
Kdata$FishBiom <- Kdata$BiomassG1 + Kdata$BiomassK1
meanC = mean(unique(c(Gdata$FishBiom, Kdata$FishBiom ) ))
sdC = sd(unique(c(Gdata$FishBiom, Kdata$FishBiom ) ))
Gdata$FishBiom <- (Gdata$FishBiom - meanC) /  sdC
Kdata$FishBiom <- (Kdata$FishBiom - meanC) /  sdC
# fish density biomass/Area
Gdata$FishDen <- Gdata$FishBiom  / Gdata$area
Kdata$FishDen <- Kdata$FishBiom  / Kdata$area
meanC = mean(unique(c(Gdata$FishDen, Kdata$FishDen ) ))
sdC = sd(unique(c(Gdata$FishDen, Kdata$FishDen ) ))
Gdata$FishDen <- (Gdata$FishDen - meanC) /  sdC
Kdata$FishDen <- (Kdata$FishDen - meanC) /  sdC
#
meanC = mean(unique(c(Gdata$canopy, Kdata$canopy) ))
sdC = sd(unique(c(Gdata$canopy, Kdata$canopy) ))
Gdata$canopy <- (Gdata$canopy - meanC) /  sdC
Kdata$canopy <- (Kdata$canopy - meanC) /  sdC
# Re-code the random effects (drainage id) --------------------------------
Kdata$stream <- factor(Kdata$Location)
levels(Kdata$stream) <- 1:length(levels(Kdata$stream))
Kdata$stream <- as.numeric(Kdata$stream)
Gdata$stream <- factor(Gdata$Location)
levels(Gdata$stream) <- 1:length(levels(Gdata$stream))
Gdata$stream <- as.numeric(Gdata$stream)
# Compare growh models ----------------------------------------------------
surv = bf(surv ~ z*NK + FishBiom + FishDen + canopy, family = bernoulli())
growth = bf(z1 ~ z*NK + FishBiom + FishDen + canopy, family = gaussian())
ModG1 = brm(z1 ~ z*NK + FishBiom + FishDen + canopy, Gdata)
ModG1 = add_criterion(ModG1, c("waic", "loo"))
ModG2 = brm(z1 ~ z*NK +  FishBiom + canopy, Gdata)
ModG2 = add_criterion(ModG2, c("waic", "loo"))
ModG3 = brm(z1 ~ z*NK +  FishDen + canopy, Gdata)
ModG3 = add_criterion(ModG3, c("waic", "loo"))
ModG4 = brm(z1 ~ z*NK +  canopy, Gdata)
ModG4 = add_criterion(ModG4, c("waic", "loo"))
loo_compare(ModG1, ModG2, ModG3, ModG4, criterion = "loo")
summary(ModG1)
pp_check(ModG1, nsamples = 100)
pp_check(ModG2, nsamples = 100)
pp_check(ModG1, nsamples = 100)
summary(ModG1)
summary(ModG2)
ModK1 = brm(z1 ~ z*NG + FishBiom + FishDen + canopy, Kdata)
ModK1 = add_criterion(ModK1, c("waic", "loo"))
ModK2 = brm(z1 ~ z*NG +  FishDen + canopy, Kdata)
ModK2 = add_criterion(ModK2, c("waic", "loo"))
ModK2 = brm(z1 ~ z*NG +  FisSBiom + canopy, Kdata)
ModK2 = brm(z1 ~ z*NG +  FishBiom + canopy, Kdata)
ModK2 = add_criterion(ModK2, c("waic", "loo"))
ModK2 = brm(z1 ~ z*NG +  FishDen + canopy, Kdata)
ModK2 = brm(z1 ~ z*NG +  FishBiom + canopy, Kdata)
ModK2 = add_criterion(ModK2, c("waic", "loo"))
ModK3 = brm(z1 ~ z*NG +  FishDen + canopy, Kdata)
ModK3 = add_criterion(ModK3, c("waic", "loo"))
ModK4 = brm(z1 ~ z*NG +  canopy, Kdata)
ModK4 = add_criterion(ModK4, c("waic", "loo"))
loo_compare(ModK1, ModK2, ModK3, ModK4, criterion = "loo")
ModK4 = add_criterion(ModK4, c("waic", "loo"), moment_match = TRUE)
loo_compare(ModK1, ModK2, ModK3, ModK4, criterion = "loo")
